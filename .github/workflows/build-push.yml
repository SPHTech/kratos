name: Build and Push Image to ECR
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: "Commit SHA to build"
        required: true
      environment:
        description: "Environment to build"
        required: true

permissions:
  id-token: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.get-short-sha.outputs.short_sha }}
    steps:
      - name: Compute short SHA
        id: get-short-sha
        env:
          FULL_SHA: ${{ github.event.inputs.commit_sha || 'master' }}
        run: |
          echo "short_sha=${FULL_SHA::7}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: prepare
    environment: ${{ github.event.inputs.environment || 'dev'}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commit_sha || 'master' }}
          path: .

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
      
      - run: go version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_IAM_ROLE }}
          role-skip-session-tagging: true
          role-session-name: gh-actions
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Build kratos binary
        run: |
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o kratos .

      - name: Get Image name:tag
        id: get-image-name
        run: |
          echo "image_name=${{ steps.login-ecr.outputs.registry }}/idpf/kratos:${{ needs.prepare.outputs.short_sha }}" >> "$GITHUB_OUTPUT"
    
      - name: Build Docker Image
        run: |
          docker build -f .docker/Dockerfile-alpine -t ${{ steps.get-image-name.outputs.image_name }} .
      
      - name: Push Docker Image
        run: |
          docker push ${{ steps.get-image-name.outputs.image_name }}
